"use strict";
var DOMException = require("../web-idl/DOMException");

module.exports = EventTarget;

function EventTarget() {
  this._events = Object.create(null);
}


EventTarget.prototype.addEventListener = function (type, callback, capture) {
  if (arguments.length < 2) {
    throw new TypeError("Expected at least 2 arguments for addEventListener");
  }

  type = String(type);

  if (callback === undefined || callback === null) {
    callback = null;
  } else if (typeof callback === "object") {
    callback = callback.handleEvent;
  } else if (typeof callback !== "function") {
    throw new TypeError("Only undefined, null, an object, or a function are allowed for the callback parameter");
  }

  capture = Boolean(capture);

  if (callback === null) {
    return;
  }

  if (this._events[type] === undefined) {
    this._events[type] = {
      capturing: [],
      bubbling: []
    };
  }

  var handlers = this._events[type][capture ? "capturing" : "bubbling"];
  if (handlers.indexOf(callback) !== -1) {
    return;
  }

  handlers.unshift(callback);
};

EventTarget.prototype.removeEventListener = function (type, callback, capture) {
  if (arguments.length < 2) {
    throw new TypeError("Expected at least 2 arguments for addEventListener");
  }

  type = String(type);

  if (callback === undefined || callback === null) {
    callback = null;
  } else if (typeof callback === "object") {
    callback = callback.handleEvent;
  } else if (typeof callback !== "function") {
    throw new TypeError("Only undefined, null, an object, or a function are allowed for the callback parameter");
  }

  capture = Boolean(capture);

  if (callback === null) {
    // Optimization, not in the spec.
    return;
  }

  if (this._events[type] === undefined) {
    return;
  }

  var handlers = this._events[type][capture ? "capturing" : "bubbling"];
  var idx = handlers.indexOf(callback);

  if (idx !== -1) {
    handlers.splice(idx, 1);
  }
};

EventTarget.prototype.dispatchEvent = function (event) {
  if (!("_bubbles" in event) || !("_cancelable" in event)) {
    throw new TypeError("Argument to dispatchEvent must be an Event");
  }

  if (event._type === null || event._type === "") {
    throw new DOMException(DOMException.INVALID_STATE_ERR, "Tried to dispatch an uninitialized event");
  }

  var targetList = [];

  event._target = this;

  //per the spec we gather the list of targets first to ensure
  //against dom modifications during actual event dispatch
  var target = this;
  var targetParent = target._parentNode;
  while (targetPare